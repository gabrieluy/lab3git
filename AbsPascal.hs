

module AbsPascal where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = PBlock Ident VarPart [Stm]
  deriving (Eq, Ord, Show, Read)

data Type = Type_bool | Type_integer | Type_real | Type_string
  deriving (Eq, Ord, Show, Read)

data VarPart = VPart [VarDecl] | VPartEmpty
  deriving (Eq, Ord, Show, Read)

data VarDecl = VDecl [Ident] Type
  deriving (Eq, Ord, Show, Read)

data Stm
    = SAss Ident Exp
    | SCall Ident [Exp]
    | SCallEmpty Ident
    | SRepeat Stm Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SFor Ident Exp Exp Stm
    | SIf Exp Stm Stm
    | SEmpty
  deriving (Eq, Ord, Show, Read)

data Exp
    = ETyped Exp Type
    | EConv Exp
    | EEq Exp Exp
    | EDiff Exp Exp
    | ELe Exp Exp
    | ELeq Exp Exp
    | EGeq Exp Exp
    | EGe Exp Exp
    | EPlus Exp Exp
    | ESubst Exp Exp
    | EOr Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAnd Exp Exp
    | EMod Exp Exp
    | EDiv2 Exp Exp
    | ECall Ident [Exp]
    | ECallEmpty Ident
    | ENot Exp
    | ENegNum Exp
    | EPlusNum Exp
    | EIdent Ident
    | EStr String
    | EInt Integer
    | EReal Double
    | ETrue
    | EFalse
  deriving (Eq, Ord, Show, Read)

